name: Build Android APK

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CI: true
      GRADLE_OPTS: -Dorg.gradle.daemon=false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Flutter (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Flutter pub get
        run: flutter pub get

      - name: Build APK (flutter)
        continue-on-error: true
        run: |
          echo "▶ flutter build apk --release"
          flutter clean
          flutter build apk --release
          echo "🔎 find APKs after flutter build:"
          find build -type f -name "*.apk" -print || true

      - name: Fallback build (Gradle assembleRelease)
        if: ${{ always() }}
        continue-on-error: true
        run: |
          echo "▶ Gradle fallback: :app:assembleRelease"
          cd android
          # если wrapper отсутствует — создаём
          if [ ! -f "./gradlew" ]; then
            echo "gradlew not found, generating wrapper..."
            sudo apt-get update && sudo apt-get install -y gradle
            gradle wrapper --gradle-version 8.7
          fi
          chmod +x ./gradlew
          ./gradlew -v || true
          ./gradlew :app:assembleRelease --info --stacktrace || true
          echo "📁 android/app/build/outputs tree:"
          ls -R app/build/outputs || true

      - name: Collect APKs
        run: |
          set -e
          echo "▶ Collecting APKs"
          mkdir -p artifacts

          # Ищем APK во всех типичных местах и формируем единый список
          FOUND=$(
            {
              find android/app/build/outputs/apk         -type f -name "*release*.apk" -print 2>/dev/null || true
              find android/app/build/outputs/flutter-apk -type f -name "*release*.apk" -print 2>/dev/null || true
              find build                                 -maxdepth 4 -type f -name "*release*.apk" -print 2>/dev/null || true
            } | sort -u
          )

          if [ -z "$FOUND" ]; then
            echo "❌ Не найдено ни одного release APK."
            echo "🔎 build/app/outputs:"
            ls -R build/app/outputs || true
            echo "🔎 android/app/build/outputs:"
            ls -R android/app/build/outputs || true
            exit 1
          fi

          echo "✅ Найдены APK:"
          echo "$FOUND"

          echo "📦 Копируем APK в artifacts/ …"
          while IFS= read -r apk; do
            [ -n "$apk" ] && cp -v "$apk" artifacts/
          done <<< "$FOUND"

          echo "🎉 Готово. В artifacts лежат:"
          ls -l artifacts

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: artifacts/*.apk
          if-no-files-found: error
