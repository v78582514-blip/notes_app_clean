name: 🚀 Build & Sign Android APK

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: ☕ Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.24.3"
          cache: true

      - name: 🧹 Clean & pub get
        run: |
          flutter clean
          flutter pub get

      - name: 🔧 Bump compileSdk/targetSdk to 36 (if needed)
        run: |
          set -e
          FILE="android/app/build.gradle"
          if [ -f "$FILE" ]; then
            sed -i 's/compileSdkVersion \([0-9]\+\)/compileSdkVersion 36/g' "$FILE" || true
            sed -i 's/targetSdkVersion \([0-9]\+\)/targetSdkVersion 36/g' "$FILE" || true
            # AGP 8+ вариант: compileSdk = N
            sed -i 's/compileSdk *= *[0-9]\+/compileSdk = 36/g' "$FILE" || true
            sed -i 's/targetSdk *= *[0-9]\+/targetSdk = 36/g' "$FILE" || true
          fi

      - name: 🏗️ Build release APK (Flutter)
        run: |
          # без shrink, чтобы избежать редких проблем с R8 при CI
          flutter build apk --release --no-shrink

      - name: 🔎 Locate built APK
        id: locate
        shell: bash
        run: |
          set -e
          echo "Listing possible output dirs for debug:"
          ls -R build/app/outputs || true
          ls -R android/app/build/outputs || true

          APK=""
          # основные варианты Flutter
          [ -f build/app/outputs/flutter-apk/app-release.apk ] && APK=build/app/outputs/flutter-apk/app-release.apk
          [ -z "$APK" ] && [ -f build/app/outputs/apk/release/app-release.apk ] && APK=build/app/outputs/apk/release/app-release.apk
          # варианты через android/
          [ -z "$APK" ] && [ -f android/app/build/outputs/flutter-apk/app-release.apk ] && APK=android/app/build/outputs/flutter-apk/app-release.apk
          [ -z "$APK" ] && [ -f android/app/build/outputs/apk/release/app-release.apk ] && APK=android/app/build/outputs/apk/release/app-release.apk
          # универсальный бэкап-поиск
          [ -z "$APK" ] && APK=$(find . -type f -name "app-release*.apk" | head -n1 || true)

          if [ -z "$APK" ]; then
            echo "❌ APK not found in known locations"; exit 1
          fi

          echo "✅ Found APK at: $APK"
          echo "apk=$APK" >> "$GITHUB_OUTPUT"

      - name: 🔐 Generate temporary debug keystore
        run: |
          keytool -genkey -v \
            -keystore debug.keystore \
            -storepass android \
            -keypass android \
            -alias androiddebugkey \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -dname "CN=Android Debug,O=Android,C=US"

      - name: 🔏 Zipalign & Sign APK
        id: sign
        shell: bash
        run: |
          set -e
          IN_APK="${{ steps.locate.outputs.apk }}"
          OUT_APK="app-release-signed.apk"
          ZIPALIGNED="app-release-aligned.apk"
          BT="$ANDROID_HOME/build-tools/34.0.0"

          echo "Aligning with zipalign..."
          "$BT/zipalign" -f 4 "$IN_APK" "$ZIPALIGNED"

          echo "Signing with apksigner (debug keystore)..."
          "$BT/apksigner" sign \
            --ks debug.keystore \
            --ks-pass pass:android \
            --key-pass pass:android \
            --ks-key-alias androiddebugkey \
            "$ZIPALIGNED"

          mv "$ZIPALIGNED" "$OUT_APK"
          echo "signed_apk=$OUT_APK" >> "$GITHUB_OUTPUT"
          echo "✅ Signed APK: $OUT_APK"

      - name: 📤 Upload signed APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-signed
          path: ${{ steps.sign.outputs.signed_apk }}
