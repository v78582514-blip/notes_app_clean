name: Build & Sign Android APK (resilient)

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CI: true
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.vfs.watch=false"
      KEY_ALIAS: myKey
      KEY_PASS: myPassword
      STORE_PASS: myPassword
      GRADLE_VERSION: "8.7"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Flutter pub get
        run: |
          flutter clean
          flutter pub get

      - name: Ensure Gradle wrapper (download Gradle ${GRADLE_VERSION})
        run: |
          set -euo pipefail
          cd android
          if [ ! -f "./gradlew" ]; then
            echo "No gradlew -> downloading Gradle ${GRADLE_VERSION} to create wrapper..."
            curl -sL "https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip" -o gradle.zip
            unzip -q gradle.zip
            ./gradle-${GRADLE_VERSION}/bin/gradle wrapper --gradle-version ${GRADLE_VERSION}
          fi
          chmod +x ./gradlew
          ./gradlew --version
          cd ..

      # 1) –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å —á–µ—Ä–µ–∑ Gradle. –î–∞–∂–µ –µ—Å–ª–∏ —É–ø–∞–¥—ë—Ç ‚Äî –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º job.
      - name: Build via Gradle (assembleRelease, tolerant)
        id: build_gradle
        continue-on-error: true
        run: |
          set -e
          cd android
          echo "üöÄ Gradle assembleRelease (no FS watcher)‚Ä¶"
          ./gradlew :app:assembleRelease --no-watch-fs --info --stacktrace --warning-mode all --console=plain || true
          echo "üìÅ outputs:"
          ls -R app/build/outputs || true
          cd ..

      # 2) –ï—Å–ª–∏ Gradle –Ω–µ –¥–∞–ª APK ‚Äî –¥–µ–ª–∞–µ–º Fallback —á–µ—Ä–µ–∑ flutter build apk
      - name: Fallback: flutter build apk --release
        if: ${{ !cancelled() }}
        run: |
          set -e
          # –£–∂–µ –µ—Å—Ç—å —Ä–µ–ª–∏–∑–Ω—ã–π APK –∏–∑ Gradle?
          if find android/app/build/outputs/apk/release -type f -name "*release*.apk" | grep -q . ; then
            echo "‚úÖ Gradle produced release APKs ‚Äî fallback –Ω–µ –Ω—É–∂–µ–Ω."
          else
            echo "üß∞ Gradle APK –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º flutter build apk --release"
            flutter build apk --release --no-shrink
            echo "üìÅ flutter outputs:"
            ls -R build/app/outputs || true
          fi

      # 3) –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–ª–∏–∑–Ω—ã–π APK (gradle –∏–ª–∏ flutter)
      - name: Locate release APK
        id: locate
        run: |
          set -euo pipefail
          FOUND=$(
            { find android/app/build/outputs/apk/release -type f -name "*release*.apk" 2>/dev/null || true; \
              find build/app/outputs/flutter-apk          -type f -name "*release*.apk" 2>/dev/null || true; } \
            | sort -u
          )
          echo "FOUND:"
          echo "$FOUND"

          # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ: unsigned Gradle -> signed Gradle -> flutter apk
          UNSIGNED=$(echo "$FOUND" | grep -E '/android/app/build/outputs/apk/release/.*-unsigned\.apk$' | head -n1 || true)
          G_SIGNED=$(echo "$FOUND" | grep -E '/android/app/build/outputs/apk/release/.*release[^/]*\.apk$' | grep -v unsigned | head -n1 || true)
          F_SIGNED=$(echo "$FOUND" | grep -E '/build/app/outputs/flutter-apk/.*release[^/]*\.apk$' | head -n1 || true)

          CHOSEN=""
          TYPE=""
          if [ -n "$UNSIGNED" ]; then CHOSEN="$UNSIGNED"; TYPE="unsigned"; fi
          if [ -z "$CHOSEN" ] && [ -n "$G_SIGNED" ]; then CHOSEN="$G_SIGNED"; TYPE="signed"; fi
          if [ -z "$CHOSEN" ] && [ -n "$F_SIGNED" ]; then CHOSEN="$F_SIGNED"; TYPE="signed"; fi

          if [ -z "$CHOSEN" ]; then
            echo "‚ùå Release APK –Ω–µ –Ω–∞–π–¥–µ–Ω."
            echo "üîé manifest-merger log:"
            cat android/app/build/outputs/logs/manifest-merger-release-report.txt 2>/dev/null || true
            exit 1
          fi

          echo "apk_path=$CHOSEN" >> "$GITHUB_OUTPUT"
          echo "apk_type=$TYPE"   >> "$GITHUB_OUTPUT"
          echo "Chosen: $CHOSEN ($TYPE)"

      # 4) –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω unsigned ‚Äî –ø–æ–¥–ø–∏—à–µ–º (zipalign + apksigner)
      - name: Generate temporary keystore (only if unsigned)
        if: steps.locate.outputs.apk_type == 'unsigned'
        run: |
          set -euo pipefail
          mkdir -p android/app
          keytool -genkeypair \
            -alias "$KEY_ALIAS" \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -keystore android/app/tmp-release.jks \
            -storepass "$STORE_PASS" \
            -keypass "$KEY_PASS" \
            -dname "CN=Temp,O=CI,L=Internet,ST=NA,C=US"
          echo "‚úÖ Keystore created: android/app/tmp-release.jks"

      - name: Sign APK (if unsigned)
        if: steps.locate.outputs.apk_type == 'unsigned'
        run: |
          set -euo pipefail
          APK="${{ steps.locate.outputs.apk_path }}"
          SDK_DIR="${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}"
          BT_DIR=$(ls -d "$SDK_DIR/build-tools/"* | sort -V | tail -1)
          ZIPALIGN="$BT_DIR/zipalign"
          APKSIGNER="$BT_DIR/apksigner"

          mkdir -p artifacts
          ALIGNED="artifacts/app-release-aligned.apk"
          "$ZIPALIGN" -v -p 4 "$APK" "$ALIGNED"

          SIGNED="artifacts/app-release-signed.apk"
          "$APKSIGNER" sign \
            --ks android/app/tmp-release.jks \
            --ks-key-alias "$KEY_ALIAS" \
            --ks-pass pass:"$STORE_PASS" \
            --key-pass pass:"$KEY_PASS" \
            --out "$SIGNED" \
            "$ALIGNED"

          "$APKSIGNER" verify --verbose "$SIGNED"
          echo "‚úÖ Signed APK: $SIGNED"

      # 5) –°–æ–±–∏—Ä–∞–µ–º –≤—Å—ë –≤ artifacts
      - name: Collect APKs
        run: |
          set -e
          mkdir -p artifacts
          # –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π Gradle
          if [ "${{ steps.locate.outputs.apk_type }}" = "signed" ]; then
            cp -v "${{ steps.locate.outputs.apk_path }}" artifacts/$(basename "${{ steps.locate.outputs.apk_path }}")
          fi
          # –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–∞–º–∏
          if [ -f artifacts/app-release-signed.apk ]; then
            true
          else
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–ª–∏ –Ω–µ –º—ã (flutter/gradle —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª), –ø–æ–ª–æ–∂–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π APK
            cp -v "${{ steps.locate.outputs.apk_path }}" artifacts/
          fi
          echo "üì¶ Final artifacts:"
          ls -l artifacts

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: artifacts/*.apk
          if-no-files-found: error
